/*****************************************************************************
 *                  IMPINJ CONFIDENTIAL AND PROPRIETARY                      *
 *                                                                           *
 * This source code is the property of Impinj, Inc. Your use of this source  *
 * code in whole or in part is subject to your applicable license terms      *
 * from Impinj.                                                              *
 * Contact support@impinj.com for a copy of the applicable Impinj license    *
 * terms.                                                                    *
 *                                                                           *
 * (c) Copyright 2020 - 2021 Impinj, Inc. All rights reserved.               *
 *                                                                           *
 *****************************************************************************/

#pragma once

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

// a define of the maximum number of channels supproted
// by the regions in the region table.  To keep this
// simple a static assert is used to verify that the
// autogenerated regions are not larger than this.
// the current largest list is FCC
#define MAX_CHANNELS ((size_t)50u)

/**
 * @struct RfFilter
 * Defines the RfFilter selection for a region.
 */
enum RfFilter
{
    LOWER_BAND = 1,  ///< 865 - 868_MHz
    UPPER_BAND = 2,  ///< 900 - 930_MHz
};

/**
 * @struct RegulatoryTimers
 * Defines the channel typical and maximum transmitter dwell times and off
 * times for a region.
 *
 * Times are in milliseconds
 */
struct RegulatoryTimers
{
    uint32_t nominal;           ///< The typical Tx dwell time during inventory.
    uint32_t extended;          ///< The maximum expected transmit time when
                                ///< accessing a tag.
    uint32_t regulatory;        ///< The regulatory limit of transmit time.
                                ///< If this timer expires the transmitter will
                                ///< be squelched.
    uint32_t off_same_channel;  ///< The minimum transmitter silent time between
                                ///< transitions when staying on the same
                                ///< frequency.
};

/**
 * @struct RegulatoryChannels
 * Defines the channels which are usable within a specific region.
 *
 * If usable is NULL then the channel band of the region is defined as
 *      start_freq + count * spacing
 * If the usable field is non-NULL then the plan is limited to the array of
 * channel pointed to by usable[count].
 */
struct RegulatoryChannels
{
    uint32_t        start_freq;  ///< The starting channel frequency [kHz]
    uint32_t        spacing;     ///< The spacing between channels [kHz]
    size_t          count;       ///< The number of channels in the plan.
    uint16_t const* usable;      ///< Limits the channels within the plan.
    size_t          usable_count;
    bool            random_hop;
};

/**
 * @struct Region
 * The aggregate regulatory information for a specific region.
 */
struct Region
{
    char const* const               name;
    uint8_t const                   region_enum;
    struct RegulatoryTimers const   regulatory_timers;
    struct RegulatoryChannels const regulatory_channels;
    uint32_t const                  pll_divider;
    enum RfFilter const             rf_filter;
    int32_t const                   max_power_cdbm;  ///< dBm x 100
};

/**
 * @struct Ex10RegionsTable
 * Regions information interface.
 */
struct Ex10RegionsTable
{
    /**
     * Given a string return the Region struct.
     *
     * @param region_name A string that matches a name in the region_table[]
     *                    instantiation found in regions.c.
     *
     * @return struct Region const* A pointer to the Region matching the region
     *                              requested.
     * @retval NULL When the requested string does not match a region.
     */
    struct Region const* (*get_region)(char const* region_name);

    /**
     * From a struct RegulatoryChannels build list of channel indices into the
     * channel table.
     *
     * @param regulatory_channels A set of channels specific to a Region.
     * @param [out] channel_table Based on the channel requirements of the
     * Region this array of channel indices is created.
     *
     * @return size_t The number of channels in the table. This return value can
     * be used to determine whether the expected channel size matches the size
     * used by call to this routine.
     */
    size_t (*build_channel_table)(
        struct RegulatoryChannels const* regulatory_channels,
        uint16_t*                        channel_table);
};

struct Ex10RegionsTable const* get_ex10_regions_table(void);

#ifdef __cplusplus
}
#endif
